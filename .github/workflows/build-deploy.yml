name: CI/CD - Test, Build, Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: CI - Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: 123
          POSTGRES_DB: fastapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          # Tests force DATABASE_HOSTNAME=127.0.0.1 in conftest.py; ensure others are set
          DATABASE_PORT: '5432'
          DATABASE_PASSWORD: '123'
          DATABASE_NAME: 'fastapi'
          DATABASE_USERNAME: 'postgres'
          SECRET_KEY: 'test-secret'
          ALGORITHM: 'HS256'
          ACCESS_TOKEN_EXPIRE_MINUTES: '30'
        run: |
          pytest -q

  build_and_push:
    name: CI - Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: frankma20250/fastapi-project
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: CD - Deploy to VM
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 34.92.219.10 >> ~/.ssh/known_hosts

      - name: Deploy application
        env:
          VM_USER: frank2025
          VM_HOST: 34.92.219.10
        run: |
          ssh ${VM_USER}@${VM_HOST} "DOCKER_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' DOCKER_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}' bash -s" << 'EOF'
          set -Eeuo pipefail

          APP_DIR="/home/frank2025/app/src"
          VENV_DIR="/home/frank2025/app/venv"

          echo "[deploy] Updating source code in ${APP_DIR}"
          if [ -d "${APP_DIR}/.git" ]; then
            git -C "${APP_DIR}" fetch --all --prune
            git -C "${APP_DIR}" checkout main
            git -C "${APP_DIR}" reset --hard origin/main
          else
            mkdir -p "${APP_DIR}"
            git clone https://github.com/${{ github.repository }}.git "${APP_DIR}"
            git -C "${APP_DIR}" checkout main
          fi

          echo "[deploy] Ensuring Python venv at ${VENV_DIR}"
          if [ ! -d "${VENV_DIR}" ]; then
            python3 -m venv "${VENV_DIR}"
          fi
          "${VENV_DIR}/bin/pip" install --upgrade pip
          "${VENV_DIR}/bin/pip" install -r "${APP_DIR}/requirements.txt"

          echo "[deploy] Loading environment and running Alembic migrations"
          # Load production env so pydantic-settings finds required variables
          if [ -f "/home/frank2025/.env" ]; then
            set -o allexport
            # shellcheck disable=SC1091
            . "/home/frank2025/.env"
            set +o allexport
          elif [ -f "${APP_DIR}/.env" ]; then
            # Fallback to project .env (e.g., if you maintain it here)
            set -o allexport
            # shellcheck disable=SC1091
            . "${APP_DIR}/.env"
            set +o allexport
          else
            echo "[deploy][warn] No .env found at /home/frank2025/.env or ${APP_DIR}/.env; Alembic may fail" >&2
          fi

          cd "${APP_DIR}"
          "${VENV_DIR}/bin/alembic" -c alembic.ini upgrade head

          echo "[deploy] Restarting systemd service: fastapi"
          sudo systemctl restart fastapi
          sudo systemctl is-active --quiet fastapi && echo "[deploy] fastapi is active" || (echo "[deploy] fastapi failed to start" && sudo journalctl -u fastapi --no-pager -n 200 && exit 1)

          echo "[deploy] Optionally pulling Docker image if Docker is available"
          if command -v docker >/dev/null 2>&1; then
            if [ -n "${DOCKER_USERNAME:-}" ] && [ -n "${DOCKER_TOKEN:-}" ]; then
              docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_TOKEN}" || true
            fi
            docker pull frankma20250/fastapi-project:latest || true
          fi
          EOF


